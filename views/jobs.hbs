{{>navBar}}

<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            <div class="card-title">
                <h2>Sube un video</h2>
            </div>
        </div>
        <div class="card-body">
            {{#if user}}
            {{>addFile}}
            {{else}}
            <h2>Inicie sesion para subir un archivo</h2>
            {{/if}}
        </div>
    </div>
</div>
<div class="container mt-4">
    <div class="card">
        <div class="card-header">
            <div class="card-title">Trabajos previos</div>
        </div>
        <div class="card-body" id='jobContainer'>
        </div>
    </div>
</div>

<script>
    var $rating = document.querySelectorAll('.rating')
    function sleep(ms) {
        return new Promise(resolve => setTimeout(resolve, ms));
    }

    (async function load() {
        const response = await fetch('/api/jobs')
        let jobs = await response.json()
        const $jobContainer = document.querySelector('#jobContainer');
        renderJobList(jobs, $jobContainer)
        $rating = document.querySelectorAll('.rating')
        const newJobs = await verificador(jobs)
        while ($jobContainer.hasChildNodes()) {
            $jobContainer.removeChild($jobContainer.firstChild);
        }
        renderJobList(newJobs, $jobContainer)
        $rating = document.querySelectorAll('.rating')
        $rating.forEach(e => {
            e.addEventListener('click', async (e) => {
                const { value } = e.target.attributes.value
                const { id } = e.target.dataset
                await fetch('/api/jobs/rating', {
                    method: 'POST', // or 'PUT'
                    body: JSON.stringify({ id, value }), // data can be `string` or {object}!
                    headers: {
                        'Content-Type': 'application/json'
                    }
                }).then(async res => {
                    const job = await res.json()
                    const $ratingContainer = document.querySelectorAll(`.ratingContainner [data-id="${job[0]._id}"]`)
                    for (var i = 0; i < 5; i++) {

                        (i < job[0].stars) ? $ratingContainer[i].classList.add('checked') : $ratingContainer[i].classList.remove('checked')
                        //$ratingContainer.forEach(e => (i>job[0].stars) ? e.classList.add('checked') : e.classList.remove('checked'))
                    }
                })
            })
        })
    })()




    async function verificador(jobs) {
        jobs = jobs.filter(job => job.status == 'IN_PROGRESS')
        while (jobs.length) {
            jobsId = jobs.map(job => job._id)
            await fetch('/api/jobs', {
                method: 'POST', // or 'PUT'
                body: JSON.stringify({ '_id': jobsId }), // data can be `string` or {object}!
                headers: {
                    'Content-Type': 'application/json'
                }
            }).then(async res => {
                jobs = await res.json()
            })

            jobs = jobs.filter(job => job.status == 'IN_PROGRESS')
            if (!jobs.length) break
            await sleep(4000)
        }
        const response = await fetch('/api/jobs')
        jobs = await response.json()
        return jobs
    }

    function template(job) {

        let stars = ''
        for (let i = 1; i <= 5; i++) {
            stars += `<span class="fa fa-star rating ${(job.stars >= i) ? 'checked' : ''}" value=${i} data-toggle="tooltip" data-id = '${job._id}' data-placement="top" title='calificar con ${i} estrella'></span>`
        }

        return (`<div class="card mb-3" id="${job._id}">
                <div class="card-header">
                    <div class="card-title">${job.name}</div>
                </div>
                <div class="card-body">
                    <h4>Codigo del trabajo: ${job.jobName}</h4>
                </div>
                <div class="card-footer">
                    <div class="starRating d-flex" style = "align-items: center; justify-content: space-around;">
                        <span>Estado del Trabajo: ${job.status}</span>
                        <div>
                            <span class='d-inline'>Calificaci√≥n: </span>
                            <div class='d-inline ratingContainner' data-id = "${job._id}">
                                ${stars}
                            </div>
                        </div>
                        <a class=" text-white btn btn-${(job.isCompleted) ? 'success' : 'secondary'}" ${(job.isCompleted) ? `href="https://${job.Bucket}.s3.amazonaws.com/${job.Key}"` : `disabled`}>Descargar .srt</a>
                        <a class=" text-white btn btn-${(job.isCompleted) ? 'success' : 'secondary'}" ${(job.isCompleted) ? `href="https://${job.Bucket}.s3.amazonaws.com/${job.userId}/${job.jobName}/${job.jobName}.json"` : `disabled`}>Descargar .json</a>
                        ${(job.isCompleted) ? '' : '<div class="spinner-border text-success" role="status"><span class="sr-only">Loading...</span></div>'}    
                    </div>
                </div>
            </div>`)
    }

    function createTemplate(HTMLString) {
        const html = document.implementation.createHTMLDocument();
        html.body.innerHTML = HTMLString;
        return html.body.children[0];
    }

    function renderJobList(list, $container) {
        list.forEach((Job) => {
            const HTMLString = template(Job);
            const JobElement = createTemplate(HTMLString);
            $container.append(JobElement);
        })
    }

</script>